theory Lee_Test
begin

builtins: rerandomizable-encryption

functions: sign/2, checksign/2, dvp/4, checkdvp/4, pk/1
equations: 
    checksign(sign(m, sk), pk(sk)) = m,
    checkdvp(dvp(x, renc(x, r, rpk(sk1)), r, rpk(sk2)), x, renc(x, r, rpk(sk1)), rpk(sk2)) = r

rule Register_Voter_pk:
    [ Fr(~ltkV) ] --[ ]-> [ !Ltk($V, ~ltkV), !Pk($V, pk(~ltkV)), Out(pk(~ltkV)) ]

rule Register_Admin_pk:
    [ Fr(~ltkA) ] --[ ]-> [ !AdminLtk($A, ~ltkA), !AdminPk($A, pk(~ltkA)), Out(pk(~ltkA)) ]

rule Register_Tallyer_pk:
    [ Fr(~ltkT) ] --[ ]-> [ !TallyerLtk($T, ~ltkT), !TallyerPk($T, pk(~ltkT)), Out(pk(~ltkT)) ]

rule Register_Voter_rpk:
    [ Fr(~ltkV) ] --[ ]-> [ !Ltkr($V, ~ltkV), !Rpk($V, rpk(~ltkV)), Out(rpk(~ltkV)) ]

rule Register_Admin_rpk:
    [ Fr(~ltkA) ] --[ ]-> [ !AdminLtkr($A, ~ltkA), !AdminRpk($A, rpk(~ltkA)), Out(rpk(~ltkA)) ]

rule Register_Tallyer_rpk:
    [ Fr(~ltkT) ] --[ ]-> [ !TallyerLtkr($T, ~ltkT), !TallyerRpk($T, rpk(~ltkT)), Out(rpk(~ltkT)) ]

rule V_1:
  let e = renc($vote, ~r, rpk(~ltkT))
      s = sign(e, ~ltkV)
  in
    [ Fr(~r), !TallyerRpk(T, rpk(~ltkT)), !Ltk(V, ~ltkV) ]
  --[ Voted($vote), Create_V_1(e) ]->
    [ Out(<e, s>), State_V_1(V, ~ltkV, $vote, ~r, T, ~ltkT) ]

rule A_1:
  let ea = rrand(e, ~ra, rpk(~ltkT))
      sa = sign(ea, ~ltkA)
      dvp_p = dvp(e, ea, ~ra, rpk(~ltkV))
  in
    [ Fr(~ra), In(<e, sign(e, ~ltkV1)>), !TallyerRpk(A, rpk(~ltkT)), !AdminLtk(A, ~ltkA), !Rpk(V, rpk(~ltkV)), State_V_1(V, ~ltkV1, $vote, r, T, ~ltkT) ]
  --[ ValidVoterSig(e, sign(e, ~ltkV1)), Registered(ea) ]->
    [ Out(<ea, sa, dvp_p>), State_A_1(V, A, e, ~ra) ]

// rule V_2:
//    let sa = sign(ea, ~ltkA)
//        dvp_p = dvp(e, ea, ra, pk(~ltkV))
//    in
//    [ In(<ea, sa, dvp_p>), !AdminPk(A, pk(~ltkA)), !Ltk(V, ~ltkV), State_V_1(V, ~ltkV, $vote, ~r, T, ~ltkT) ]
//  --[ ValidAdminSig_V(ea, sa), EncVotePublished(ea, sa) ]->
//    [ Out(<ea, sa>) ]

rule T_1:
    let v = rdec(ea, ~ltkT)
    in
    [ In(<ea, sign(ea, ~ltkA1)>), !AdminPk(A, pk(~ltkA1)), !TallyerLtkr(T, ~ltkT) ]
  --[ ValidAdminSig_T(ea, sign(ea, ~ltkA1)), VotePublished(v) ]->
    [ Out(v) ]

lemma exec:
    exists-trace
    " Ex e #i. VotePublished(e) @i "

end
